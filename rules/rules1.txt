
[notAccessibleFor_Disabled:
	(?user :hasDisability :Wheelchair) 
	(?section  rdf:type  :Staircase) 
   	->   
  	print('Disabled: ', ?section, ' not Accessible For ', ?user)
   	(?section :notAccessibleFor ?user) 
]

[notAccessibleFor_Accompanied:
	(?user1 :accompaniedBy ?user2)
	(?section :notAccessibleFor ?user1)
    -> 
  	print('AccompaniedBy: ', ?section, ' not Accessible For ', ?user2)
    (?section :notAccessibleFor ?user2)
]

[notAccessibleFor_Panic:
	(?section1 :emergencyState :panic)
	(?user :locatedIn  ?section2)
	notEqual(?section1,?section2)
	->
  	print('Panic: ', ?section1, ' not Accessible For ', ?user)
  	(?section1 :notAccessibleFor ?user)
]

[startingRoute:
	(?user :locatedIn ?room) 
	(?route  rdf:type :EvacuationRoute) 
	(?route :startsIn  ?room)
	-> 
	(?route :startingRouteFor ?user)
  	print('starting route for: ', ?route, ' has starting route for ', ?user)
]

[notPossibleRoute:
	(?route :startingRouteFor ?user)
	(?route :path  ?path) 
	(?section :notAccessibleFor ?user) 
	listContains(?path,?section)
    ->
    (?route :isNotPossibleFor ?user)
  	print('Route: ', ?route, ' is not possible for ', ?user)
]